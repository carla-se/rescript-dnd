// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Id from "rescript/lib/es6/belt_Id.js";
import * as Belt_Map from "rescript/lib/es6/belt_Map.js";
import * as Belt_Set from "rescript/lib/es6/belt_Set.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Dnd__ReactHooks from "./Dnd__ReactHooks.bs.js";

function smoothScrollBy(x, y) {
  window.scrollBy({
        left: x,
        top: y,
        behavior: "smooth"
      });
}

function adjust(el, topMarginFactor, bottomMarginFactor) {
  var rect = el.getBoundingClientRect();
  var clientHeight = document.documentElement.clientHeight;
  var shouldScrollUp = rect.top < rect.height * topMarginFactor;
  var shouldScrollDown = clientHeight - rect.bottom < rect.height * bottomMarginFactor;
  if (shouldScrollUp) {
    return smoothScrollBy(0, rect.top - rect.height * topMarginFactor);
  } else if (shouldScrollDown) {
    return smoothScrollBy(0, rect.bottom - clientHeight + rect.height * bottomMarginFactor);
  } else {
    return ;
  }
}

var Scroll = {
  smoothScrollBy: smoothScrollBy,
  adjust: adjust
};

function Make(Item) {
  var ComparableItem = Belt_Id.MakeComparable(Item);
  var useSelection = function (topMarginFactorOpt, bottomMarginFactorOpt, param) {
    var topMarginFactor = topMarginFactorOpt !== undefined ? topMarginFactorOpt : 3;
    var bottomMarginFactor = bottomMarginFactorOpt !== undefined ? bottomMarginFactorOpt : 3;
    var initialState = React.useMemo((function () {
            var set = Belt_Set.make(ComparableItem);
            return {
                    current: set,
                    previous: set
                  };
          }), []);
    var refs = React.useRef(Belt_Map.make(ComparableItem));
    var match = Dnd__ReactHooks.useReducer(initialState, (function (state, action) {
            if (typeof action === "number") {
              if (action === /* RestorePrevious */0) {
                return {
                        TAG: /* Update */0,
                        _0: {
                          current: state.previous,
                          previous: state.current
                        }
                      };
              } else {
                return {
                        TAG: /* Update */0,
                        _0: {
                          current: Belt_Set.make(ComparableItem),
                          previous: state.current
                        }
                      };
              }
            }
            switch (action.TAG | 0) {
              case /* SelectOne */0 :
                  var id = action._0;
                  return {
                          TAG: /* UpdateWithSideEffects */1,
                          _0: {
                            current: Belt_Set.add(Belt_Set.make(ComparableItem), id),
                            previous: state.current
                          },
                          _1: (function (param) {
                              Belt_Option.mapWithDefault(Belt_Map.get(refs.current, id), undefined, (function (param) {
                                      return adjust(param, topMarginFactor, bottomMarginFactor);
                                    }));
                            })
                        };
              case /* DeselectOne */1 :
                  return {
                          TAG: /* Update */0,
                          _0: {
                            current: Belt_Set.remove(state.current, action._0),
                            previous: state.current
                          }
                        };
              case /* Concat */2 :
                  return {
                          TAG: /* Update */0,
                          _0: {
                            current: Belt_Set.mergeMany(state.current, action._0),
                            previous: state.current
                          }
                        };
              case /* FromArray */3 :
                  return {
                          TAG: /* Update */0,
                          _0: {
                            current: Belt_Set.fromArray(action._0, ComparableItem),
                            previous: state.current
                          }
                        };
              
            }
          }));
    var dispatch = match[1];
    var state = match[0];
    return {
            register: (function (itemId, el) {
                var el$1 = Belt_Option.flatMap((el == null) ? undefined : Caml_option.some(el), (function (prim) {
                        if (prim == null) {
                          return ;
                        } else {
                          return Caml_option.some(prim);
                        }
                      }));
                if (el$1 !== undefined) {
                  refs.current = Belt_Map.set(refs.current, itemId, Caml_option.valFromOption(el$1));
                  return ;
                }
                
              }),
            dispose: (function (itemId) {
                refs.current = Belt_Map.remove(refs.current, itemId);
                if (Belt_Set.has(state.current, itemId)) {
                  return Curry._1(dispatch, {
                              TAG: /* DeselectOne */1,
                              _0: itemId
                            });
                }
                
              }),
            size: (function (param) {
                return Belt_Set.size(state.current);
              }),
            array: (function (param) {
                return Belt_Set.toArray(state.current);
              }),
            has: (function (itemId) {
                return Belt_Set.has(state.current, itemId);
              }),
            isOnly: (function (itemId) {
                if (Belt_Set.size(state.current) === 1) {
                  return Belt_Set.has(state.current, itemId);
                } else {
                  return false;
                }
              }),
            isMulti: (function (param) {
                return Belt_Set.size(state.current) > 1;
              }),
            isEmpty: (function (param) {
                return Belt_Set.isEmpty(state.current);
              }),
            selectOne: (function (itemId) {
                Curry._1(dispatch, {
                      TAG: /* SelectOne */0,
                      _0: itemId
                    });
              }),
            deselectOne: (function (itemId) {
                Curry._1(dispatch, {
                      TAG: /* DeselectOne */1,
                      _0: itemId
                    });
              }),
            concat: (function (items) {
                Curry._1(dispatch, {
                      TAG: /* Concat */2,
                      _0: items
                    });
              }),
            fromArray: (function (items) {
                Curry._1(dispatch, {
                      TAG: /* FromArray */3,
                      _0: items
                    });
              }),
            restorePrevious: (function (param) {
                Curry._1(dispatch, /* RestorePrevious */0);
              }),
            clear: (function (param) {
                Curry._1(dispatch, /* Clear */1);
              })
          };
  };
  return {
          ComparableItem: ComparableItem,
          useSelection: useSelection
        };
}

var ReactHooks;

export {
  ReactHooks ,
  Scroll ,
  Make ,
}
/* react Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Dnd__Style from "./Dnd__Style.bs.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Dnd__Events from "./Dnd__Events.bs.js";
import * as Dnd__Geometry from "./Dnd__Geometry.bs.js";
import * as ReactDOMStyle from "@rescript/react/src/ReactDOMStyle.bs.js";
import * as Dnd__ReactHooks from "./Dnd__ReactHooks.bs.js";
import * as Dnd__Scrollable from "./Dnd__Scrollable.bs.js";

function Make(Context) {
  var Item = Context.Item;
  var clearSelection = function (param) {
    var selection = window.getSelection();
    if (!(selection == null)) {
      selection.removeAllRanges();
      return ;
    }
    
  };
  var getGeometry = function (element) {
    return Dnd__Geometry.getGeometry(element.getBoundingClientRect(), Dnd__Style.getComputedStyle(element), Dnd__Scrollable.$$Window.getScrollPosition(undefined));
  };
  var Helpers = {
    clearSelection: clearSelection,
    getGeometry: getGeometry
  };
  var onMouseDown = function (itemId, containerId, ctx, $$event) {
    var match = ctx.current.status;
    if (typeof match !== "number") {
      return ;
    }
    if (!(Dnd__Events.Mouse.leftClick($$event) && !Dnd__Events.Mouse.modifier($$event))) {
      return ;
    }
    var start_page = {
      x: $$event.pageX,
      y: $$event.pageY
    };
    var start_viewport = {
      x: $$event.clientX,
      y: $$event.clientY
    };
    var start = {
      page: start_page,
      viewport: start_viewport
    };
    var onInitialMouseMove = function ($$event) {
      $$event.preventDefault();
      var current_page = {
        x: $$event.pageX,
        y: $$event.pageY
      };
      var current_viewport = {
        x: $$event.clientX,
        y: $$event.clientY
      };
      var current = {
        page: current_page,
        viewport: current_viewport
      };
      var moved = Math.abs(start_page.x - current_page.x) > 1 || Math.abs(start_page.y - current_page.y) > 1;
      if (moved) {
        dropInitialSubscriptions(undefined);
        clearSelection(undefined);
        return Curry._5(ctx.current.startDragging, itemId, containerId, start, current, "Mouse");
      }
      
    };
    var onInitialMouseUp = function (param) {
      dropInitialSubscriptions(undefined);
    };
    var onInitialDrag = function (param) {
      dropInitialSubscriptions(undefined);
    };
    var dropInitialSubscriptions = function (param) {
      Dnd__Events.unsubscribeFromMouseMove(onInitialMouseMove);
      Dnd__Events.unsubscribeFromMouseUp(onInitialMouseUp);
      Dnd__Events.unsubscribeFromDrag(onInitialDrag);
    };
    Dnd__Events.subscribeToMouseMove(onInitialMouseMove);
    Dnd__Events.subscribeToMouseUp(onInitialMouseUp);
    Dnd__Events.subscribeToDrag(onInitialDrag);
  };
  var MouseInteractions = {
    onMouseDown: onMouseDown
  };
  var onTouchStart = function (itemId, containerId, ctx, $$event) {
    var match = ctx.current.status;
    if (typeof match !== "number") {
      return ;
    }
    var touch = $$event.touches[0];
    var start_page = {
      x: touch.pageX,
      y: touch.pageY
    };
    var start_viewport = {
      x: touch.clientX,
      y: touch.clientY
    };
    var start = {
      page: start_page,
      viewport: start_viewport
    };
    var timeoutId = {
      contents: undefined
    };
    var onInitialTouchEnd = function (param) {
      cancelDrag(undefined);
    };
    var onInitialTouchMove = function (param) {
      cancelDrag(undefined);
    };
    var onInitialDrag = function (param) {
      cancelDrag(undefined);
    };
    var cancelDrag = function (param) {
      var timeoutId$1 = timeoutId.contents;
      if (timeoutId$1 !== undefined) {
        clearTimeout(Caml_option.valFromOption(timeoutId$1));
        return ;
      }
      
    };
    var dropInitialSubscriptions = function (param) {
      Dnd__Events.unsubscribeFromTouchMove(onInitialTouchMove);
      Dnd__Events.unsubscribeFromTouchEnd(onInitialTouchEnd);
      Dnd__Events.unsubscribeFromDrag(onInitialDrag);
    };
    var startDragging = function (param) {
      return setTimeout((function (param) {
                    dropInitialSubscriptions(undefined);
                    clearSelection(undefined);
                    Curry._5(ctx.current.startDragging, itemId, containerId, start, start, "Touch");
                  }), 200);
    };
    Dnd__Events.subscribeToTouchMove(onInitialTouchMove);
    Dnd__Events.subscribeToTouchEnd(onInitialTouchEnd);
    Dnd__Events.subscribeToDrag(onInitialDrag);
    timeoutId.contents = Caml_option.some(startDragging(undefined));
  };
  var TouchInteractions = {
    onTouchStart: onTouchStart
  };
  var Dnd__DraggableItem$Make = function (Props) {
    var itemId = Props.id;
    var containerId = Props.containerId;
    var index = Props.index;
    var className = Props.className;
    var children = Props.children;
    var ctx = React.useContext(Context.x);
    var ctxRef = React.useRef(ctx);
    React.useEffect(function () {
          ctxRef.current = ctx;
        });
    var element = React.useRef(null);
    var prevStatus = Dnd__ReactHooks.usePrevious(ctx.status);
    React.useEffect((function () {
            var match = ctx.status;
            if (prevStatus === undefined) {
              return ;
            }
            if (typeof prevStatus !== "number") {
              return ;
            }
            if (typeof match === "number") {
              return ;
            }
            if (match.TAG !== /* Collecting */0) {
              return ;
            }
            Curry._1(ctx.registerItem, {
                  id: itemId,
                  containerId: containerId,
                  index: index,
                  element: Belt_Option.getExn(Caml_option.nullable_to_opt(element.current)),
                  getGeometry: (function (param) {
                      return getGeometry(Belt_Option.getExn(Caml_option.nullable_to_opt(element.current)));
                    })
                });
          }), [
          prevStatus,
          ctx.status
        ]);
    var dragHandleStyle = React.useMemo((function () {
            return ReactDOMStyle.unsafeAddProp({}, "WebkitTapHighlightColor", "rgba(0, 0, 0, 0)");
          }), []);
    var onMouseDown$1 = React.useCallback((function (param) {
            return onMouseDown(itemId, containerId, ctxRef, param);
          }), [
          containerId,
          ctxRef,
          element
        ]);
    var onTouchStart$1 = React.useCallback((function (param) {
            return onTouchStart(itemId, containerId, ctxRef, param);
          }), [
          containerId,
          ctxRef,
          element
        ]);
    var children$p = children.NAME === "ChildrenWithDragHandle" ? Curry._3(children.VAL, dragHandleStyle, onMouseDown$1, onTouchStart$1) : children.VAL;
    var match = ctx.status;
    var exit = 0;
    var ghost;
    if (typeof match === "number") {
      exit = 2;
    } else {
      switch (match.TAG | 0) {
        case /* Collecting */0 :
            exit = 2;
            break;
        case /* Dragging */1 :
            var ghost$1 = match._0;
            if (Curry._2(Item.eq, itemId, ghost$1.itemId)) {
              var match$1 = ghost$1.axis;
              var match$2 = match$1 ? [
                  Dnd__Style.px(0),
                  Dnd__Style.px(ghost$1.dimensions.height)
                ] : [
                  Dnd__Style.px(ghost$1.dimensions.width),
                  Dnd__Style.px(0)
                ];
              var height = match$2[1];
              var width = match$2[0];
              var scroll = ctx.scroll;
              var scroll$1 = ctx.scroll;
              var tmp = {
                ref: element,
                style: ReactDOMStyle.unsafeAddProp({
                      height: Dnd__Style.px(ghost$1.dimensions.height),
                      left: Dnd__Style.px(ghost$1.departureRect.page.left),
                      margin: "0",
                      overflow: "visible",
                      position: "fixed",
                      top: Dnd__Style.px(ghost$1.departureRect.page.top),
                      width: Dnd__Style.px(ghost$1.dimensions.width),
                      zIndex: "10000",
                      boxSizing: "border-box",
                      transform: Dnd__Style.translate(ghost$1.delta.x - (
                            scroll !== undefined ? scroll.current.x : window.pageXOffset
                          ), ghost$1.delta.y - (
                            scroll$1 !== undefined ? scroll$1.current.y : window.pageYOffset
                          )),
                      userSelect: "none",
                      pointerEvents: "none"
                    }, "WebkitUserSelect", "none"),
                tabIndex: -1
              };
              var tmp$1 = Belt_Option.map(className, (function (fn) {
                      return Curry._1(fn, true);
                    }));
              if (tmp$1 !== undefined) {
                tmp.className = Caml_option.valFromOption(tmp$1);
              }
              return React.createElement(React.Fragment, undefined, React.createElement("div", tmp, children$p), React.createElement("div", {
                              style: {
                                height: height,
                                marginTop: Dnd__Style.px(ghost$1.margins.top),
                                marginRight: Dnd__Style.px(ghost$1.margins.right),
                                marginBottom: Dnd__Style.px(ghost$1.margins.bottom),
                                marginLeft: Dnd__Style.px(ghost$1.margins.left),
                                minHeight: height,
                                minWidth: width,
                                width: width,
                                boxSizing: "border-box",
                                transition: Dnd__Style.transition("all")
                              }
                            }));
            }
            ghost = ghost$1;
            exit = 1;
            break;
        case /* Dropping */2 :
            var ghost$2 = match._0;
            if (Curry._2(Item.eq, itemId, ghost$2.itemId)) {
              var match$3 = ghost$2.axis;
              var match$4 = match$3 ? [
                  Dnd__Style.px(0),
                  Dnd__Style.px(ghost$2.dimensions.height)
                ] : [
                  Dnd__Style.px(ghost$2.dimensions.width),
                  Dnd__Style.px(0)
                ];
              var height$1 = match$4[1];
              var width$1 = match$4[0];
              var scroll$2 = ctx.scroll;
              var scroll$3 = ctx.scroll;
              var tmp$2 = {
                ref: element,
                style: ReactDOMStyle.unsafeAddProp({
                      height: Dnd__Style.px(ghost$2.dimensions.height),
                      left: Dnd__Style.px(ghost$2.departureRect.page.left),
                      margin: "0",
                      overflow: "visible",
                      position: "fixed",
                      top: Dnd__Style.px(ghost$2.departureRect.page.top),
                      width: Dnd__Style.px(ghost$2.dimensions.width),
                      zIndex: "10000",
                      boxSizing: "border-box",
                      transition: Dnd__Style.transition("transform"),
                      transform: Dnd__Style.translate(ghost$2.delta.x - (
                            scroll$2 !== undefined ? scroll$2.current.x : window.pageXOffset
                          ), ghost$2.delta.y - (
                            scroll$3 !== undefined ? scroll$3.current.y : window.pageYOffset
                          )),
                      userSelect: "none",
                      pointerEvents: "none"
                    }, "WebkitUserSelect", "none")
              };
              var tmp$3 = Belt_Option.map(className, (function (fn) {
                      return Curry._1(fn, true);
                    }));
              if (tmp$3 !== undefined) {
                tmp$2.className = Caml_option.valFromOption(tmp$3);
              }
              return React.createElement(React.Fragment, undefined, React.createElement("div", tmp$2, children$p), React.createElement("div", {
                              style: {
                                height: height$1,
                                marginTop: Dnd__Style.px(ghost$2.margins.top),
                                marginRight: Dnd__Style.px(ghost$2.margins.right),
                                marginBottom: Dnd__Style.px(ghost$2.margins.bottom),
                                marginLeft: Dnd__Style.px(ghost$2.margins.left),
                                minHeight: height$1,
                                minWidth: width$1,
                                width: width$1,
                                boxSizing: "border-box",
                                transition: Dnd__Style.transition("all")
                              }
                            }));
            }
            ghost = ghost$2;
            exit = 1;
            break;
        
      }
    }
    switch (exit) {
      case 1 :
          var match$5 = Curry._1(ctx.getItemShift, itemId);
          if (match$5 !== undefined) {
            if (match$5) {
              if (ghost.targetingOriginalContainer) {
                var match$6 = ghost.axis;
                var tmp$4 = {
                  ref: element,
                  style: ReactDOMStyle.unsafeAddProp({
                        boxSizing: "border-box",
                        transition: Dnd__Style.transition("transform"),
                        transform: match$6 ? Dnd__Style.translate(0, ghost.dimensions.height + ghost.margins.top + ghost.margins.bottom) : Dnd__Style.translate(ghost.dimensions.width + ghost.margins.left + ghost.margins.right, 0),
                        userSelect: "none",
                        pointerEvents: "none"
                      }, "WebkitUserSelect", "none")
                };
                var tmp$5 = Belt_Option.map(className, (function (fn) {
                        return Curry._1(fn, false);
                      }));
                if (tmp$5 !== undefined) {
                  tmp$4.className = Caml_option.valFromOption(tmp$5);
                }
                return React.createElement("div", tmp$4, children$p);
              }
              var match$7 = ghost.axis;
              var tmp$6 = {
                ref: element,
                style: ReactDOMStyle.unsafeAddProp({
                      boxSizing: "border-box",
                      transition: Dnd__Style.transition("transform"),
                      transform: match$7 ? Dnd__Style.translate(0, ghost.dimensions.height + ghost.margins.top + ghost.margins.bottom) : Dnd__Style.translate(ghost.dimensions.width + ghost.margins.left + ghost.margins.right, 0),
                      userSelect: "none",
                      pointerEvents: "none"
                    }, "WebkitUserSelect", "none")
              };
              var tmp$7 = Belt_Option.map(className, (function (fn) {
                      return Curry._1(fn, false);
                    }));
              if (tmp$7 !== undefined) {
                tmp$6.className = Caml_option.valFromOption(tmp$7);
              }
              return React.createElement("div", tmp$6, children$p);
            }
            if (ghost.targetingOriginalContainer) {
              var match$8 = ghost.axis;
              var tmp$8 = {
                ref: element,
                style: ReactDOMStyle.unsafeAddProp({
                      boxSizing: "border-box",
                      transition: Dnd__Style.transition("transform"),
                      transform: match$8 ? Dnd__Style.translate(0, -(ghost.dimensions.height + ghost.margins.top + ghost.margins.bottom)) : Dnd__Style.translate(-(ghost.dimensions.width + ghost.margins.left + ghost.margins.right), 0),
                      userSelect: "none",
                      pointerEvents: "none"
                    }, "WebkitUserSelect", "none")
              };
              var tmp$9 = Belt_Option.map(className, (function (fn) {
                      return Curry._1(fn, false);
                    }));
              if (tmp$9 !== undefined) {
                tmp$8.className = Caml_option.valFromOption(tmp$9);
              }
              return React.createElement("div", tmp$8, children$p);
            }
            var tmp$10 = {
              ref: element,
              style: ReactDOMStyle.unsafeAddProp({
                    boxSizing: "border-box",
                    transition: Dnd__Style.transition("transform"),
                    userSelect: "none",
                    pointerEvents: "none"
                  }, "WebkitUserSelect", "none")
            };
            var tmp$11 = Belt_Option.map(className, (function (fn) {
                    return Curry._1(fn, false);
                  }));
            if (tmp$11 !== undefined) {
              tmp$10.className = Caml_option.valFromOption(tmp$11);
            }
            return React.createElement("div", tmp$10, children$p);
          }
          var tmp$12 = {
            ref: element,
            style: ReactDOMStyle.unsafeAddProp({
                  boxSizing: "border-box",
                  transition: Dnd__Style.transition("transform"),
                  userSelect: "none",
                  pointerEvents: "none"
                }, "WebkitUserSelect", "none")
          };
          var tmp$13 = Belt_Option.map(className, (function (fn) {
                  return Curry._1(fn, false);
                }));
          if (tmp$13 !== undefined) {
            tmp$12.className = Caml_option.valFromOption(tmp$13);
          }
          return React.createElement("div", tmp$12, children$p);
      case 2 :
          if (children.NAME === "ChildrenWithDragHandle") {
            var tmp$14 = {
              ref: element,
              style: {
                boxSizing: "border-box"
              }
            };
            var tmp$15 = Belt_Option.map(className, (function (fn) {
                    return Curry._1(fn, false);
                  }));
            if (tmp$15 !== undefined) {
              tmp$14.className = Caml_option.valFromOption(tmp$15);
            }
            return React.createElement("div", tmp$14, children$p);
          }
          var tmp$16 = {
            ref: element,
            style: {
              boxSizing: "border-box"
            },
            tabIndex: 0,
            onMouseDown: onMouseDown$1,
            onTouchStart: onTouchStart$1
          };
          var tmp$17 = Belt_Option.map(className, (function (fn) {
                  return Curry._1(fn, false);
                }));
          if (tmp$17 !== undefined) {
            tmp$16.className = Caml_option.valFromOption(tmp$17);
          }
          return React.createElement("div", tmp$16, children$p);
      
    }
  };
  return {
          Item: Item,
          Container: Context.Container,
          Helpers: Helpers,
          MouseInteractions: MouseInteractions,
          TouchInteractions: TouchInteractions,
          make: Dnd__DraggableItem$Make
        };
}

var Context;

var Events;

var Style;

var Geometry;

var Scrollable;

var ReactHooks;

export {
  Context ,
  Events ,
  Style ,
  Geometry ,
  Scrollable ,
  ReactHooks ,
  Make ,
}
/* react Not a pure module */

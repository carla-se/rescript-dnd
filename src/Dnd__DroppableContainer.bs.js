// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Dnd__Style from "./Dnd__Style.bs.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Dnd__Geometry from "./Dnd__Geometry.bs.js";
import * as Dnd__ReactHooks from "./Dnd__ReactHooks.bs.js";
import * as Dnd__Scrollable from "./Dnd__Scrollable.bs.js";

function Make(Context) {
  var Container = Context.Container;
  var getGeometryAndScrollable = function (element) {
    var elementRect = element.getBoundingClientRect();
    var elementStyle = Dnd__Style.getComputedStyle(element);
    var windowScrollPosition = Dnd__Scrollable.$$Window.getScrollPosition(undefined);
    var geometry = Dnd__Geometry.getGeometry(elementRect, elementStyle, windowScrollPosition);
    var scrollable;
    if (Dnd__Scrollable.$$Element.isScrollable(elementStyle)) {
      var elementMaxScroll = Dnd__Scrollable.$$Element.getMaxScroll(element);
      var elementScrollPosition = Dnd__Scrollable.$$Element.getScrollPosition(element);
      scrollable = {
        element: element,
        geometry: geometry,
        scroll: {
          initial: elementScrollPosition,
          current: elementScrollPosition,
          delta: {
            x: 0,
            y: 0
          },
          max: elementMaxScroll
        }
      };
    } else {
      scrollable = Dnd__Scrollable.$$Element.getClosestScrollable(element);
    }
    return [
            geometry,
            scrollable
          ];
  };
  var Helpers = {
    getGeometryAndScrollable: getGeometryAndScrollable
  };
  var Dnd__DroppableContainer$Make = function (props) {
    var children = props.children;
    var accept = props.accept;
    var lockAxis = props.lockAxis;
    var axis = props.axis;
    var containerId = props.id;
    var lockAxis$1 = lockAxis !== undefined ? lockAxis : false;
    var ctx = React.useContext(Context.x);
    var element = React.useRef(null);
    var prevStatus = Dnd__ReactHooks.usePrevious(ctx.status);
    React.useEffect((function () {
            var match = ctx.status;
            if (prevStatus === undefined) {
              return ;
            }
            if (typeof prevStatus !== "number") {
              return ;
            }
            if (typeof match === "number") {
              return ;
            }
            if (match.TAG !== /* Collecting */0) {
              return ;
            }
            Curry._1(ctx.registerContainer, {
                  id: containerId,
                  axis: axis,
                  lockAxis: lockAxis$1,
                  element: Belt_Option.getExn(Caml_option.nullable_to_opt(element.current)),
                  accept: accept,
                  getGeometryAndScrollable: (function (param) {
                      return getGeometryAndScrollable(Belt_Option.getExn(Caml_option.nullable_to_opt(element.current)));
                    })
                });
          }), [
          prevStatus,
          ctx.status
        ]);
    var match = ctx.status;
    var tmp;
    var exit = 0;
    var exit$1 = 0;
    if (typeof match === "number") {
      exit = 1;
    } else {
      switch (match.TAG | 0) {
        case /* Collecting */0 :
            exit = 1;
            break;
        case /* Dragging */1 :
        case /* Dropping */2 :
            exit$1 = 2;
            break;
        
      }
    }
    if (exit$1 === 2) {
      var ghost = match._0;
      if (Belt_Option.eq(ghost.targetContainer, Caml_option.some(containerId), Container.eq) && !ghost.targetingOriginalContainer) {
        var match$1 = ghost.axis;
        var match$2 = match$1 ? [
            Dnd__Style.px(0),
            Dnd__Style.px(ghost.dimensions.height)
          ] : [
            Dnd__Style.px(ghost.dimensions.width),
            Dnd__Style.px(0)
          ];
        var height = match$2[1];
        var width = match$2[0];
        tmp = React.createElement(React.Fragment, undefined, children, React.createElement("div", {
                  style: {
                    borderTop: Dnd__Style.px(ghost.borders.top),
                    borderRight: Dnd__Style.px(ghost.borders.right),
                    borderBottom: Dnd__Style.px(ghost.borders.bottom),
                    borderLeft: Dnd__Style.px(ghost.borders.left),
                    height: height,
                    marginTop: Dnd__Style.px(ghost.margins.top),
                    marginRight: Dnd__Style.px(ghost.margins.right),
                    marginBottom: Dnd__Style.px(ghost.margins.bottom),
                    marginLeft: Dnd__Style.px(ghost.margins.left),
                    minHeight: height,
                    minWidth: width,
                    width: width,
                    boxSizing: "border-box",
                    transition: Dnd__Style.transition("all")
                  }
                }));
      } else {
        exit = 1;
      }
    }
    if (exit === 1) {
      tmp = React.createElement(React.Fragment, undefined, children, React.createElement("div", {
                style: {
                  border: Dnd__Style.px(0),
                  height: Dnd__Style.px(0),
                  margin: Dnd__Style.px(0),
                  minHeight: Dnd__Style.px(0),
                  minWidth: Dnd__Style.px(0),
                  width: Dnd__Style.px(0),
                  boxSizing: "border-box",
                  transition: Dnd__Style.transition("all")
                }
              }));
    }
    return React.createElement("div", {
                ref: Caml_option.some(element),
                className: Belt_Option.map(props.className, (function (fn) {
                        return Curry._1(fn, Belt_Option.getWithDefault(Belt_Option.map(ctx.target, (function (target) {
                                              return Curry._2(Container.eq, target, containerId);
                                            })), false));
                      }))
              }, tmp);
  };
  return {
          Item: Context.Item,
          Container: Container,
          Helpers: Helpers,
          make: Dnd__DroppableContainer$Make
        };
}

var Context;

var Style;

var Geometry;

var Scrollable;

var ReactHooks;

export {
  Context ,
  Style ,
  Geometry ,
  Scrollable ,
  ReactHooks ,
  Make ,
}
/* react Not a pure module */

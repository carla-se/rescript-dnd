// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function hook(v) {
  var x = React.useRef(undefined);
  React.useEffect(function () {
        x.current = Caml_option.some(v);
      });
  return x.current;
}

var Previous = {
  hook: hook
};

var Dispatch = {};

var Public = {};

var Private = {};

function hook$1(initialState, reducer) {
  var match = React.useReducer((function (private_, action) {
          var sideEffects = private_.sideEffects;
          var state = Curry._2(reducer, private_.state, action);
          if (typeof state === "number") {
            return private_;
          }
          switch (state.TAG | 0) {
            case /* Update */0 :
                return {
                        state: state._0,
                        sideEffects: private_.sideEffects
                      };
            case /* UpdateWithSideEffects */1 :
                return {
                        state: state._0,
                        sideEffects: {
                          contents: Belt_Array.concat(sideEffects.contents, [state._1])
                        }
                      };
            case /* SideEffects */2 :
                return {
                        state: private_.state,
                        sideEffects: {
                          contents: Belt_Array.concat(sideEffects.contents, [state._0])
                        }
                      };
            
          }
        }), {
        state: initialState,
        sideEffects: {
          contents: []
        }
      });
  var dispatch = match[1];
  var match$1 = match[0];
  var sideEffects = match$1.sideEffects;
  var state = match$1.state;
  React.useEffect((function () {
          if (sideEffects.contents.length !== 0) {
            Belt_Array.forEach(sideEffects.contents, (function (fn) {
                    Curry._1(fn, {
                          state: state,
                          dispatch: dispatch
                        });
                  }));
            sideEffects.contents = [];
          }
          
        }), [sideEffects.contents]);
  return [
          state,
          dispatch
        ];
}

var Reducer = {
  Dispatch: Dispatch,
  Public: Public,
  Private: Private,
  hook: hook$1
};

var usePrevious = hook;

var useReducer = hook$1;

export {
  Previous ,
  Reducer ,
  usePrevious ,
  useReducer ,
}
/* react Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE


var addOptions = {
  passive: false,
  once: false,
  capture: false
};

var removeOptions = {
  passive: false,
  capture: false
};

function subscribeToMouseMove(handler) {
  window.addEventListener("mousemove", handler, addOptions);
}

function unsubscribeFromMouseMove(handler) {
  window.removeEventListener("mousemove", handler, removeOptions);
}

function subscribeToMouseUp(handler) {
  window.addEventListener("mouseup", handler, addOptions);
}

function unsubscribeFromMouseUp(handler) {
  window.removeEventListener("mouseup", handler, removeOptions);
}

function subscribeToDrag(handler) {
  window.addEventListener("drag", handler, addOptions);
}

function unsubscribeFromDrag(handler) {
  window.removeEventListener("drag", handler, removeOptions);
}

function subscribeToResize(handler) {
  window.addEventListener("resize", handler, addOptions);
}

function unsubscribeFromResize(handler) {
  window.removeEventListener("resize", handler, removeOptions);
}

function subscribeToKeyUp(handler) {
  window.addEventListener("keyup", handler, addOptions);
}

function unsubscribeFromKeyUp(handler) {
  window.removeEventListener("keyup", handler, removeOptions);
}

function subscribeToKeyDown(handler) {
  window.addEventListener("keydown", handler, addOptions);
}

function unsubscribeFromKeyDown(handler) {
  window.removeEventListener("keydown", handler, removeOptions);
}

function subscribeToTouchMove(handler) {
  window.addEventListener("touchmove", handler, addOptions);
}

function unsubscribeFromTouchMove(handler) {
  window.removeEventListener("touchmove", handler, removeOptions);
}

function subscribeToTouchEnd(handler) {
  window.addEventListener("touchend", handler, addOptions);
}

function unsubscribeFromTouchEnd(handler) {
  window.removeEventListener("touchend", handler, removeOptions);
}

function subscribeToOrientationChange(handler) {
  window.addEventListener("orientationchange", handler, addOptions);
}

function unsubscribeFromOrientationChange(handler) {
  window.removeEventListener("orientationchange", handler, removeOptions);
}

function subscribeToContextMenu(handler) {
  window.addEventListener("contextmenu", handler, addOptions);
}

function unsubscribeFromContextMenu(handler) {
  window.removeEventListener("contextmenu", handler, removeOptions);
}

function subscribeToVisibilityChange(handler) {
  window.addEventListener("visibilitychange", handler, addOptions);
}

function unsubscribeFromVisibilityChange(handler) {
  window.removeEventListener("visibilitychange", handler, removeOptions);
}

function leftClick($$event) {
  return $$event.button === 0;
}

function modifier($$event) {
  if ($$event.altKey || $$event.ctrlKey || $$event.metaKey) {
    return true;
  } else {
    return $$event.shiftKey;
  }
}

var Mouse = {
  leftClick: leftClick,
  modifier: modifier
};

function fromString(x) {
  switch (x) {
    case " " :
        return /* Space */2;
    case "ArrowDown" :
        return /* ArrowDown */5;
    case "ArrowLeft" :
        return /* ArrowLeft */6;
    case "ArrowRight" :
        return /* ArrowRight */7;
    case "ArrowUp" :
        return /* ArrowUp */4;
    case "Enter" :
        return /* Enter */3;
    case "Escape" :
        return /* Esc */0;
    case "Tab" :
        return /* Tab */1;
    default:
      return /* Other */8;
  }
}

var Key = {
  fromString: fromString
};

function key($$event) {
  return fromString($$event.key);
}

var Dom = {
  key: key
};

function key$1($$event) {
  return fromString($$event.key);
}

var React = {
  key: key$1
};

var Keyboard = {
  Key: Key,
  Dom: Dom,
  React: React
};

var $$Touch = {};

var $$Touch$1 = {
  $$Touch: $$Touch
};

export {
  addOptions ,
  removeOptions ,
  subscribeToMouseMove ,
  unsubscribeFromMouseMove ,
  subscribeToMouseUp ,
  unsubscribeFromMouseUp ,
  subscribeToDrag ,
  unsubscribeFromDrag ,
  subscribeToResize ,
  unsubscribeFromResize ,
  subscribeToKeyUp ,
  unsubscribeFromKeyUp ,
  subscribeToKeyDown ,
  unsubscribeFromKeyDown ,
  subscribeToTouchMove ,
  unsubscribeFromTouchMove ,
  subscribeToTouchEnd ,
  unsubscribeFromTouchEnd ,
  subscribeToOrientationChange ,
  unsubscribeFromOrientationChange ,
  subscribeToContextMenu ,
  unsubscribeFromContextMenu ,
  subscribeToVisibilityChange ,
  unsubscribeFromVisibilityChange ,
  Mouse ,
  Keyboard ,
  $$Touch$1 as $$Touch,
}
/* No side effect */

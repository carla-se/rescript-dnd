// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function calculateAxis(position, dimension, direction) {
  if (direction) {
    var startFrom = dimension * (1.0 - 0.25);
    var maxSpeedAt = dimension * (1.0 - 0.05);
    if (!(position >= startFrom && position < maxSpeedAt)) {
      if (position >= maxSpeedAt) {
        return 28.0;
      } else {
        return ;
      }
    }
    var scrollRange = maxSpeedAt - startFrom;
    var distanceFromStart = position - startFrom;
    var powed = Math.pow(distanceFromStart / scrollRange, 2.0);
    return 28.0 * powed;
  }
  var startFrom$1 = dimension * 0.25;
  var maxSpeedAt$1 = dimension * 0.05;
  if (!(position <= startFrom$1 && position > maxSpeedAt$1)) {
    if (position <= maxSpeedAt$1) {
      return -28.0;
    } else {
      return ;
    }
  }
  var scrollRange$1 = startFrom$1 - maxSpeedAt$1;
  var distanceFromStart$1 = startFrom$1 - position;
  var powed$1 = Math.pow(distanceFromStart$1 / scrollRange$1, 2.0);
  return -(28.0 * powed$1);
}

function calculate(point, dimensions, direction) {
  return {
          x: calculateAxis(point.x, dimensions.width, direction.x),
          y: calculateAxis(point.y, dimensions.height, direction.y)
        };
}

var Speed = {
  startFrom: 0.25,
  maxSpeedAt: 0.05,
  maxSpeed: 28.0,
  calculateAxis: calculateAxis,
  calculate: calculate
};

function getWindowScrollDirection(point, viewport) {
  return {
          x: viewport.width / 2 > point.viewport.x ? /* Alpha */0 : /* Omega */1,
          y: viewport.height / 2 > point.viewport.y ? /* Alpha */0 : /* Omega */1
        };
}

function getElementScrollDirection(point, scrollable) {
  return {
          x: scrollable.geometry.dimensions.width / 2 > point.x ? /* Alpha */0 : /* Omega */1,
          y: scrollable.geometry.dimensions.height / 2 > point.y ? /* Alpha */0 : /* Omega */1
        };
}

function canScrollWindow(scroll, viewport, direction) {
  var match = direction.x;
  var match$1 = direction.y;
  return {
          x: match ? scroll.max.x !== scroll.current.x + viewport.width : scroll.current.x > 0,
          y: match$1 ? scroll.max.y !== scroll.current.y + viewport.height : scroll.current.y > 0
        };
}

function canScrollElement(scrollable, direction) {
  var match = direction.x;
  var match$1 = direction.y;
  return {
          x: match ? scrollable.scroll.max.x !== scrollable.geometry.dimensions.width + scrollable.scroll.current.x : scrollable.scroll.current.x > 0,
          y: match$1 ? scrollable.scroll.max.y !== scrollable.geometry.dimensions.height + scrollable.scroll.current.y : scrollable.scroll.current.y > 0
        };
}

function windowScroller(point, viewport, direction) {
  return {
          TAG: /* Window */0,
          _0: (function (onScroll) {
              var speed = calculate(point.viewport, viewport, direction);
              var x = speed.x;
              if (x !== undefined) {
                var y = speed.y;
                if (y !== undefined) {
                  return Caml_option.some(requestAnimationFrame(function (param) {
                                  window.scrollBy(x, y);
                                  Curry._1(onScroll, undefined);
                                }));
                } else {
                  return Caml_option.some(requestAnimationFrame(function (param) {
                                  window.scrollBy(x, 0);
                                  Curry._1(onScroll, undefined);
                                }));
                }
              }
              var y$1 = speed.y;
              if (y$1 !== undefined) {
                return Caml_option.some(requestAnimationFrame(function (param) {
                                window.scrollBy(0, y$1);
                                Curry._1(onScroll, undefined);
                              }));
              }
              
            })
        };
}

function elementScroller(point, scrollable, direction) {
  return {
          TAG: /* Element */1,
          _0: (function (onScroll) {
              var speed = calculate(point, scrollable.geometry.dimensions, direction);
              var x = speed.x;
              if (x !== undefined) {
                var y = speed.y;
                if (y !== undefined) {
                  return Caml_option.some(requestAnimationFrame(function (param) {
                                  scrollable.element.scrollLeft = scrollable.scroll.current.x + x;
                                  scrollable.element.scrollTop = scrollable.scroll.current.y + y;
                                  Curry._1(onScroll, scrollable);
                                }));
                } else {
                  return Caml_option.some(requestAnimationFrame(function (param) {
                                  scrollable.element.scrollLeft = scrollable.scroll.current.x + x;
                                  Curry._1(onScroll, scrollable);
                                }));
                }
              }
              var y$1 = speed.y;
              if (y$1 !== undefined) {
                return Caml_option.some(requestAnimationFrame(function (param) {
                                scrollable.element.scrollTop = scrollable.scroll.current.y + y$1;
                                Curry._1(onScroll, scrollable);
                              }));
              }
              
            })
        };
}

function relToScrollable(point, scrollable) {
  return {
          x: point.page.x - scrollable.geometry.rect.page.left,
          y: point.page.y - scrollable.geometry.rect.page.top
        };
}

function getScroller(point, viewport, scroll, scrollable) {
  if (scrollable !== undefined) {
    if (scrollable.geometry.dimensions.height > viewport.height) {
      var windowScrollDirection = getWindowScrollDirection(point, viewport);
      var canScrollWindow$1 = canScrollWindow(scroll, viewport, windowScrollDirection);
      if (canScrollWindow$1.x) {
        return windowScroller(point, viewport, windowScrollDirection);
      }
      if (canScrollWindow$1.y) {
        return windowScroller(point, viewport, windowScrollDirection);
      }
      var point$1 = relToScrollable(point, scrollable);
      var elementScrollDirection = getElementScrollDirection(point$1, scrollable);
      var canScrollElement$1 = canScrollElement(scrollable, elementScrollDirection);
      if (canScrollElement$1.x || canScrollElement$1.y) {
        return elementScroller(point$1, scrollable, elementScrollDirection);
      } else {
        return ;
      }
    }
    var point$2 = relToScrollable(point, scrollable);
    var elementScrollDirection$1 = getElementScrollDirection(point$2, scrollable);
    var canScrollElement$2 = canScrollElement(scrollable, elementScrollDirection$1);
    if (canScrollElement$2.x || canScrollElement$2.y) {
      return elementScroller(point$2, scrollable, elementScrollDirection$1);
    } else {
      return ;
    }
  }
  var windowScrollDirection$1 = getWindowScrollDirection(point, viewport);
  var canScrollWindow$2 = canScrollWindow(scroll, viewport, windowScrollDirection$1);
  if (canScrollWindow$2.x || canScrollWindow$2.y) {
    return windowScroller(point, viewport, windowScrollDirection$1);
  }
  
}

var Geometry;

export {
  Geometry ,
  Speed ,
  getWindowScrollDirection ,
  getElementScrollDirection ,
  canScrollWindow ,
  canScrollElement ,
  windowScroller ,
  elementScroller ,
  relToScrollable ,
  getScroller ,
}
/* No side effect */

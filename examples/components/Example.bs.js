// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cx from "rescript-classnames/src/Cx.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Input from "./Input.bs.js";
import * as Label from "./Label.bs.js";
import * as React from "react";
import * as Control from "./Control.bs.js";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as MenuIcon from "../icons/MenuIcon.bs.js";
import * as GithubIcon from "../icons/GithubIcon.bs.js";

function Example$Container(Props) {
  var layout = Props.layout;
  var showMobileNav = Props.showMobileNav;
  var children = Props.children;
  var tmp;
  switch (layout) {
    case /* Vertical */0 :
        tmp = "vertical";
        break;
    case /* Horizontal */1 :
        tmp = "horizontal";
        break;
    case /* CardBoard */2 :
        tmp = "card-board";
        break;
    
  }
  return React.createElement("div", {
              className: Cx.cx([
                    "example",
                    tmp
                  ])
            }, React.createElement("div", {
                  className: "example-navbar-mobile"
                }, React.createElement(Control.make, {
                      onClick: (function (param) {
                          Curry._1(showMobileNav, undefined);
                        }),
                      children: React.createElement(MenuIcon.make, {})
                    }), React.createElement("h1", undefined, "rescript-dnd"), React.createElement("a", {
                      href: "https://github.com/shakacode/rescript-dnd"
                    }, React.createElement(GithubIcon.make, {}))), children);
}

var Container = {
  make: Example$Container
};

function Example$Static(Props) {
  var title = Props.title;
  var layout = Props.layout;
  var showMobileNav = Props.showMobileNav;
  var children = Props.children;
  return React.createElement(Example$Container, {
              layout: layout,
              showMobileNav: showMobileNav,
              children: React.createElement("div", {
                    className: "example-wrapper"
                  }, React.createElement("div", {
                        className: "example-header"
                      }, React.createElement("div", {
                            className: "example-header-title"
                          }, title)), children)
            });
}

var Static = {
  make: Example$Static
};

function reducer(state, action) {
  var value = action._0;
  if (value === "") {
    return 0;
  }
  var value$1;
  try {
    value$1 = Belt_Int.fromString(value);
  }
  catch (exn){
    return state;
  }
  if (value$1 !== undefined && value$1 < 1000) {
    return value$1;
  } else {
    return state;
  }
}

function Example$Dynamic(Props) {
  var title = Props.title;
  var layout = Props.layout;
  var scrollableOpt = Props.scrollable;
  var showMobileNav = Props.showMobileNav;
  var initialAmount = Props.initialAmount;
  var children = Props.children;
  var scrollable = scrollableOpt !== undefined ? scrollableOpt : false;
  var match = React.useReducer(reducer, initialAmount);
  var dispatch = match[1];
  var amount = match[0];
  return React.createElement(Example$Container, {
              layout: layout,
              showMobileNav: showMobileNav,
              children: React.createElement("div", {
                    className: "example-wrapper"
                  }, React.createElement("div", {
                        className: "example-header"
                      }, React.createElement("div", {
                            className: "example-header-title"
                          }, title), React.createElement("div", {
                            className: "example-header-toolbar"
                          }, React.createElement(Label.make, {
                                htmlFor: "input-amount",
                                children: "# of todos"
                              }), React.createElement(Input.make, {
                                id: "input-amount",
                                value: amount !== 0 ? String(amount) : "",
                                onChange: (function (x) {
                                    Curry._1(dispatch, /* UpdateAmount */{
                                          _0: x
                                        });
                                  })
                              }))), scrollable ? React.createElement("div", {
                          className: "scrollable-container"
                        }, Curry._1(children, amount)) : Curry._1(children, amount))
            });
}

var Dynamic = {
  reducer: reducer,
  make: Example$Dynamic
};

export {
  Container ,
  Static ,
  Dynamic ,
}
/* Input Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Dnd from "../../src/Dnd.bs.js";
import * as Caml from "rescript/lib/es6/caml.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Id from "rescript/lib/es6/belt_Id.js";
import * as ArrayExt from "../libs/ArrayExt.bs.js";
import * as Belt_Map from "rescript/lib/es6/belt_Map.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";

function MakeId($star) {
  var Id = {};
  var toString = function (x) {
    return String(x);
  };
  var eq = function (x1, x2) {
    return x1 === x2;
  };
  var cmp = Caml.int_compare;
  var Comparable = Belt_Id.MakeComparable({
        cmp: cmp
      });
  var make = function (param) {
    return Belt_Map.make(Comparable);
  };
  var $$Map = {
    make: make
  };
  return {
          Id: Id,
          toString: toString,
          eq: eq,
          cmp: cmp,
          Comparable: Comparable,
          $$Map: $$Map
        };
}

var Id = {};

function toString(x) {
  return String(x);
}

function eq(x1, x2) {
  return x1 === x2;
}

var cmp = Caml.int_compare;

var Comparable = Belt_Id.MakeComparable({
      cmp: cmp
    });

function make(param) {
  return Belt_Map.make(Comparable);
}

var $$Map = {
  make: make
};

var TodoId = {
  Id: Id,
  toString: toString,
  eq: eq,
  cmp: cmp,
  Comparable: Comparable,
  $$Map: $$Map
};

var Id$1 = {};

function toString$1(x) {
  return String(x);
}

function eq$1(x1, x2) {
  return x1 === x2;
}

var cmp$1 = Caml.int_compare;

var Comparable$1 = Belt_Id.MakeComparable({
      cmp: cmp$1
    });

function make$1(param) {
  return Belt_Map.make(Comparable$1);
}

var $$Map$1 = {
  make: make$1
};

var TodoListId = {
  Id: Id$1,
  toString: toString$1,
  eq: eq$1,
  cmp: cmp$1,
  Comparable: Comparable$1,
  $$Map: $$Map$1
};

var DraggableItem = {
  eq: eq,
  cmp: cmp
};

var DroppableContainer = {
  eq: eq$1,
  cmp: cmp$1
};

var Todos = Dnd.Make(DraggableItem, DroppableContainer);

function reducer(state, action) {
  var match = action._0;
  if (match === undefined) {
    return state;
  }
  if (match.TAG === /* SameContainer */0) {
    var placement = match._1;
    var todoId = match._0;
    var todo = Belt_Map.getExn(state.todoMap, todoId);
    return {
            todoListIndex: state.todoListIndex,
            todoListMap: Belt_Map.update(state.todoListMap, todo.todoListId, (function (todoList) {
                    return Belt_Option.map(todoList, (function (todoList) {
                                  return {
                                          id: todoList.id,
                                          title: todoList.title,
                                          todos: ArrayExt.reinsert(todoList.todos, todoId, placement ? ({
                                                    NAME: "Before",
                                                    VAL: placement._0
                                                  }) : "Last")
                                        };
                                }));
                  })),
            todoMap: state.todoMap
          };
  }
  var placement$1 = match._2;
  var targetTodoListId = match._1;
  var todoId$1 = match._0;
  var todo$1 = Belt_Map.getExn(state.todoMap, todoId$1);
  return {
          todoListIndex: state.todoListIndex,
          todoListMap: Belt_Map.update(Belt_Map.update(state.todoListMap, todo$1.todoListId, (function (todoList) {
                      return Belt_Option.map(todoList, (function (todoList) {
                                    return {
                                            id: todoList.id,
                                            title: todoList.title,
                                            todos: Belt_Array.keep(todoList.todos, (function (todoId$p) {
                                                    return todoId$p !== todoId$1;
                                                  }))
                                          };
                                  }));
                    })), targetTodoListId, (function (todoList) {
                  return Belt_Option.map(todoList, (function (todoList) {
                                return {
                                        id: todoList.id,
                                        title: todoList.title,
                                        todos: ArrayExt.insert(todoList.todos, todoId$1, placement$1 ? ({
                                                  NAME: "Before",
                                                  VAL: placement$1._0
                                                }) : "Last")
                                      };
                              }));
                })),
          todoMap: Belt_Map.update(state.todoMap, todoId$1, (function (todo) {
                  return Belt_Option.map(todo, (function (todo) {
                                return {
                                        id: todo.id,
                                        title: todo.title,
                                        todoListId: targetTodoListId
                                      };
                              }));
                }))
        };
}

var initialState_todoListIndex = [
  1,
  2
];

var initialState_todoListMap = Belt_Map.set(Belt_Map.set(Belt_Map.make(Comparable$1), 1, {
          id: 1,
          title: "Todo list #1",
          todos: [
            1,
            2
          ]
        }), 2, {
      id: 2,
      title: "Todo list #2",
      todos: [
        3,
        4
      ]
    });

var initialState_todoMap = Belt_Map.set(Belt_Map.set(Belt_Map.set(Belt_Map.set(Belt_Map.make(Comparable), 1, {
                  id: 1,
                  title: "Todo #1",
                  todoListId: 1
                }), 2, {
              id: 2,
              title: "Todo #2",
              todoListId: 1
            }), 3, {
          id: 3,
          title: "Todo #3",
          todoListId: 2
        }), 4, {
      id: 4,
      title: "Todo #4",
      todoListId: 2
    });

var initialState = {
  todoListIndex: initialState_todoListIndex,
  todoListMap: initialState_todoListMap,
  todoMap: initialState_todoMap
};

function SaferIdentifiersAndMultipleContainersGuide(props) {
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  return React.createElement(Todos.DndManager.make, {
              onReorder: (function (result) {
                  Curry._1(dispatch, /* ReorderTodos */{
                        _0: result
                      });
                }),
              children: Belt_Array.map(state.todoListIndex, (function (todoListId) {
                      var todoList = Belt_Map.getExn(state.todoListMap, todoListId);
                      return JsxPPXReactSupport.createElementVariadicWithKey(String(todoListId), Todos.DroppableContainer.make, {
                                  id: todoListId,
                                  axis: /* Y */1,
                                  children: null
                                }, [
                                  React.createElement("h2", undefined, todoList.title),
                                  Belt_Array.mapWithIndex(todoList.todos, (function (index, todoId) {
                                          var todo = Belt_Map.getExn(state.todoMap, todoId);
                                          return JsxPPXReactSupport.createElementWithKey(String(todoId), Todos.DraggableItem.make, {
                                                      id: todoId,
                                                      containerId: todoListId,
                                                      index: index,
                                                      children: {
                                                        NAME: "Children",
                                                        VAL: todo.title
                                                      }
                                                    });
                                        }))
                                ]);
                    }))
            });
}

var make$2 = SaferIdentifiersAndMultipleContainersGuide;

export {
  MakeId ,
  TodoId ,
  TodoListId ,
  DraggableItem ,
  DroppableContainer ,
  Todos ,
  reducer ,
  initialState ,
  make$2 as make,
}
/* Comparable Not a pure module */

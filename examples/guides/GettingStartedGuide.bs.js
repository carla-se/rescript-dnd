// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Dnd from "../../src/Dnd.bs.js";
import * as Caml from "rescript/lib/es6/caml.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as ArrayExt from "../libs/ArrayExt.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";

function eq(x1, x2) {
  return x1 === x2;
}

var cmp = Caml.int_compare;

var Item = {
  eq: eq,
  cmp: cmp
};

var Container = Dnd.MakeSingletonContainer({});

var Items = Dnd.Make(Item, Container);

function reducer(state, action) {
  var match = action._0;
  if (match === undefined) {
    return state;
  }
  if (match.TAG !== /* SameContainer */0) {
    return state;
  }
  var placement = match._1;
  return ArrayExt.reinsert(state, match._0, placement ? ({
                  NAME: "Before",
                  VAL: placement._0
                }) : "Last");
}

var initialState = [
  1,
  2,
  3,
  4,
  5,
  6,
  7
];

function GettingStartedGuide(Props) {
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  return React.createElement(Items.DndManager.make, {
              onReorder: (function (result) {
                  Curry._1(dispatch, /* ReorderItems */{
                        _0: result
                      });
                }),
              children: React.createElement(Items.DroppableContainer.make, {
                    id: undefined,
                    axis: /* Y */1,
                    children: Belt_Array.mapWithIndex(match[0], (function (index, item) {
                            return React.createElement(Items.DraggableItem.make, {
                                        id: item,
                                        containerId: undefined,
                                        index: index,
                                        children: {
                                          NAME: "Children",
                                          VAL: String(item)
                                        },
                                        key: String(item)
                                      });
                          }))
                  })
            });
}

var make = GettingStartedGuide;

export {
  Item ,
  Container ,
  Items ,
  reducer ,
  initialState ,
  make ,
}
/* Container Not a pure module */
